# l4 encoding of PDPA 
# Part VIA - Notification of Data Breaches &
# Personal Data Protection (Notification of Data Breaches) Regulations 2021

#############################################################################
############################# Class definitions ##############################
##############################################################################

# ---------------------------- Party definitions ----------------------
class Individual  {
    NaturalPersonLivingOrDeceased: Boolean
}

class PublicAgency

class Commission

class Organisation

class DataIntermediary extends Organisation  {
    ProcessesDataOnBehalfOfAnotherOrganisation: Boolean
    DoesNotIncludeEmployeeOfTheOtherOrganisation: Boolean
}

class DataIntermediaryOnBehalfOfPublicAgency extends DataIntermediary



#------------------------ What information constitutes data -------------------------------

class PersonalData  {
    IndividualIdentifiedFromData: Boolean
    IndividualIdentifiedFromDataAndInformationOrgHas: Boolean
}

class Event

class DataBreach  extends Event {
    UnauthorisedAccess: Boolean
    UnauthorisedCollection: Boolean
    UnauthorisedUse: Boolean
    UnauthorisedDisclosure: Boolean
    UnauthorisedCopying: Boolean
    UnauthorisedModification: Boolean
    UnauthorisedDisposal: Boolean
    LossofStorageMedium: Boolean
}

class UnauthorizedAccessBreach extends DataBreach


class DataBreachOnlyWithinOrg extends DataBreach


#----------------------------"Reasonability" concepts--------------------------

class LikelytoOccur

class DataBreachRelatesTo

class Reasonable

class ReasonToBelieve extends Reasonable

class BestofKnowledgeAndBelief extends Reasonable

# NOTE: Other precribed circumstances under the schedule to be encoded later with more detail 
decl otherPrescribedCircumstances : Boolean


class SignificantScale  {
    AffectedIndividuals: Integer
}

# MS: isn't that rather the individual and not the harm to the individual?
# You're right, the key linking statement is that it is significant harm to individual if "data breach relates to" etc...
# But conceptually, the attributes don't belong to the individual, but relate to the individual's data

class Data 
class IndividualData extends Data {
    FullName: Boolean
    IDNumber: Boolean
    PersonalDataInPart1ofScheduleSubjectToPart2ofSchedule: Boolean
    AccountIdentifier: Boolean
    PasswordtoAccount: Boolean
}


#------------------------------- Actions taken by parties involved-----------------------

class AssessmentOfDataBreach  {
    DataInPossession: Boolean
    DataUnderControl: Boolean
    ReasonableAndExpeditious: Boolean
    PrescribedRequirements: Boolean
}

class ActionTaken

class ApplicationByOrg

class DirectionBy

class CommissionSoDirects extends DirectionBy

class PrescribedLawEnforcementInstructs extends DirectionBy

class WavierByCommission extends DirectionBy

class InBreach

#------------------------------- Notification requirements ----------------------------

class Notification

class NotificationofOtherOrg extends Notification

class UponNotification extends Notification

# r5(1) of PDPR 
class NotificationtoCommission extends UponNotification {
    
    DateWhichBreachFirstOccurred: Integer 
    StepsTakenByOrgAfterBreach: String
    HowTheBreachOccurred: String
    NumOfAffectedIndividuals: Integer
    DataAffectedByBreach: String
    PotentialHarmToIndividuals: String

    ActionTakenBeforeOrAfterBreachToEliminateOrMitigateHarm: String
    ActionTakenBeforeOrAfterBreachToAddressAnyFailureThatMayHaveCausedBreach: String

    InfoOnOrgPlanToInformAffectedIndividuals: String
    BusinessContactofOrg: String
}


# r5(2)
class NotificationtoCommissionAfterExpiry extends NotificationtoCommission {
    ReasonsForLateNotification: String
    SupportingEvidence: String
}

# r5(3)
class NotificationtoCommissionWithoutNotificationToIndividual extends NotificationtoCommission {
    GroundsForNotNotifyingIndividual: String
}

class NotificationtoPublicAgency extends Notification

class PrescribedRequirements

class RestrictionOnTheDisclosureofInformation  {
    DutyorObligationUnderLaw: Boolean
    DutyUnderContract: Boolean
    RuleOfProfessionalConduct: Boolean
}


#--------------------------- Time classes and misc ------------------------------
class PriorTo

class Days

class DateofDataBreach

class TechnologicalMeasure

class ObligationUnderLawNotToDiscloseOrRuleOfProfessionalConduct

class RuleOfProfessionalConduct

###########################################################################
############################### Declarations ##############################
###########################################################################

#------------------------------ s26B: Notifiable Data Breach ------------------------------ 

# data breach causes significant harm to an affected individual
decl significantHarm: DataBreach -> Individual -> Boolean

decl significantscale: SignificantScale -> Boolean
decl isOfSignificantScale: DataBreach -> Boolean
decl databreach: DataBreach -> Boolean
decl dataBreachOnlyWithinOrg: DataBreach -> Boolean 

# TODO: this is certainly not the right thing
class significantHarmToIndividualClass




#------------------------------ s26C: Duty to conduct assessment of data breach ----------------------
decl reasontobelieve: ReasonToBelieve -> Boolean
decl dataintermediary: DataIntermediary -> Boolean
decl notification: Notification -> Boolean
decl notificationootherorg: NotificationofOtherOrg -> Boolean


#------------------------------ s26D: Duty to notify occurrence of data breach ---------------------- 
# NOTE: Maybe these functions that convert the classes to booleans can be part of the local scope of the general rule? (ie. defined within an object called s26D)

decl actiontaken: ActionTaken -> Boolean
decl prescribedrequirements: PrescribedRequirements -> Boolean
decl technologicalmeasure: TechnologicalMeasure -> Boolean
decl prescribedlawenforcement: PrescribedLawEnforcementInstructs -> Boolean
decl priorto: PriorTo -> Boolean
decl commissionsodirects: CommissionSoDirects -> Boolean
decl applicationbyorg: ApplicationByOrg -> Boolean
decl waiverbycommission: WavierByCommission -> Boolean

decl dataintermediaryonbehalfofpublicagency: DataIntermediaryOnBehalfOfPublicAgency -> Boolean

#=======================================================================================
#== Rules
#=======================================================================================

#------------------------------ s26B: Notifiable Data Breach ------------------------------ 

decl isNotifiableDataBreach : DataBreach -> Boolean
decl exemptFromNotification : DataBreach -> Boolean

# TODO: this should become an assertion 
fact <notifiableExemptMutuallyExclusive>
for db: DataBreach
not (isNotifiableDataBreach db && exemptFromNotification db)

rule <s26b_1>
for db: DataBreach, indiv: Individual
if significantHarm db indiv || isOfSignificantScale db
then isNotifiableDataBreach db 

# isNotifiableDataBreach is the characteristic predicate of NotifiableDataBreach
# The question is whether in the end, we will keep the class NotifiableDataBreach at all

# MS: not clear what "without limiting subsection (1)(a)" means here
# Rule (1)(a) has the form: significantHarm --> isNotifiableDataBreach

# My interpretation is that "without limiting" means that there could be other conditions (not currently specified in the legislation)
# that could also constitute significant harm under ss(1)(a). Perhaps we need another class OtherConditions?

decl dataOfBreach: Data -> DataBreach -> Boolean 
decl dataRelatedToIndividual: Data -> Individual -> Boolean

# s26B(2) - Significant Harm
rule <s26b_2>
for dt: Data, db: DataBreach, indiv: Individual
if dataOfBreach dt db && dataRelatedToIndividual dt indiv 
|| otherPrescribedCircumstances
then significantHarm db indiv

decl exceedsPrescrNumberOfIndividuals: DataBreach -> Boolean

# s26B(3) - Significant Scale
rule <s26b_3>
for db: DataBreach
if exceedsPrescrNumberOfIndividuals db
|| otherPrescribedCircumstances
then isOfSignificantScale db


# s26B(4) - Exception, breach within organisation
# Contrary to the Act, the despite clause only affects s26b_1
# because s26b_2 and s26b_3 refer to preconditions of isNotifiableDataBreach
rule <s26b_4>
    {restrict: {despite: s26b_1}}
for db: DataBreach
if dataBreachOnlyWithinOrg db
then exemptFromNotification db


#------------------------------ s26C: Duty to Conduct Assessment of Breach ------------------------------ 

# This is supposed to be a date
# class Commencementofs13ofPDPA extends Days

# s26C(1): Section applies to data breach that occurs on or after date of commencement of s13 of PDPA
# >= here is used to represent "on or after"

# TODO: it would be ideal to have a notion of "context"
# Proposed syntax:
# begin context <s26c>
# for db : DataBreach
# assuming date(db) >= date(commencement(PersonalDataProtectionAct2020))
# ... (set of rules and facts)
# end context <s26c>

decl requiresAssessmentIfNotifiable : Organisation -> DataBreach -> Boolean
decl controls : Organisation -> Data -> Boolean

rule <s26c_2>
for dt: Data, db: DataBreach, org: Organisation
if dataOfBreach dt db 
&& controls org dt
then requiresAssessmentIfNotifiable org db

decl processesInBehalfOf : DataIntermediary -> Data -> Organisation -> Boolean

# obligationToNotify org1 org2 ev: org1 has the obligation to notify org2 about event ev
decl obligationToNotify : Organisation -> Organisation -> Event -> Boolean
decl workingForPublicAgency : Organisation -> Boolean

# The requirement "not working for public agency" is imprecise (also in the Act)
# It is probably meant that the organisation is related to the public agency concerning the breached data
# and not concerning a non-critical project
rule <s26c_3a>
for dt: Data, db: DataBreach, interm: DataIntermediary, org: Organisation
if processesInBehalfOf interm dt org
&& not (workingForPublicAgency interm)
&& dataOfBreach dt db
then obligationToNotify interm org db 

# TODO: s26c_3b: to be encoded in an automaton

# s26C(3)(a): Duty for data intermediary to inform other organisation
rule <s26c_3_a>
for di: DataIntermediary, rb: ReasonToBelieve, db: DataBreach, pa: PublicAgency, s26c_1_applies: Boolean
if (    
    dataintermediary di && reasontobelieve rb && databreach db && (not PublicAgency) && s26c_1_applies
)
then NotificationofOtherOrg


# s26C(3)(b): Duty for other organisation to conduct assessment
rule <s26c_3_b_applies>
if s26c_3_a_applies
then AssessmentOfDataBreach


# s26C(2) - Duty to conduct assessment of data breach
rule <s26c_2_applies>
for rb: ReasonToBelieve, s26c_1_applies: Boolean
if (
    reasontobelieve rb && (not s26c_3_a_applies) && s26c_1_applies
)
then AssessmentOfDataBreach

# NOTE: s26C(4) can it be represented as the attribute of class AssessmentOfDataBreach?


#------------------------------ s26D: Duty to Notify Occurrence of Notifiable Data Breach ------------------------------ 

# s26D(1) - Notification to commission

# decl bestofknowledgeandbelief: BestofKnowledgeAndBelief -> Boolean
# decl days: Days -> Integer -> Boolean

# class InBreachofPDPA

rule <s26d_1_applies>
for ndb: NotifiableDataBreach, bfb: BestofKnowledgeAndBelief, d: Days
if (
    notifiabledatabreach ndb && bestofknowledgeandbelief bfb && days 3
)
then NotificationtoCommission


# rule <s26d_1_else_in_breach>
# for ndb: NotifiableDataBreach, bfb: BestofKnowledgeAndBelief, d: Days
# if (
#    notifiabledatabreach ndb && (not (bestofknowledgeandbelief bfb) || not (days 3))
# )
# then InBreachOfPDPA



# s26D(2) - Notification to Individuals
rule <s26d_2_applies>
for ndb: NotifiableDataBreach, 
    s26d_5_a_applies: Boolean, s26d_5_b_applies: Boolean, 
    s26d_6_a_applies: Boolean, s26d_6_b_applies: Boolean, s26d_7_applies: Boolean
if (
    notifiabledatabreach ndb && (s26d_5_a_applies || s26d_5_b_applies || s26d_6_a_applies || s26d_6_b_applies || s26d_7_applies)
)
then NotificationtoCommissionWithoutNotificationToIndividual

rule <s26d_2_applies_else>
for ndb: NotifiableDataBreach, 
    s26d_5_a_applies: Boolean, s26d_5_b_applies: Boolean, 
    s26d_6_a_applies: Boolean, s26d_6_b_applies: Boolean, s26d_7_applies: Boolean
if not (
    notifiabledatabreach ndb && (s26d_5_a_applies || s26d_5_b_applies || s26d_6_a_applies || s26d_6_b_applies || s26d_7_applies)
)
then NotificationtoCommission


# s26D(5)(a) - Exceptions to notification to individuals
rule <s26d_5_a_applies>
for ndb: NotifiableDataBreach, at: ActionTaken, pr: PrescribedRequirements, sh: SignificantHarmToIndividual
if (
    notifiabledatabreach ndb && actiontaken at && prescribedrequirements pr && (not significantharm sh)
)
then NotificationtoCommissionWithoutNotificationToIndividual



# s26D(5)(b) - Exception to notification to individuals
rule <s26d_5_b_applies>
for ndb: NotifiableDataBreach, tm: TechnologicalMeasure, pt: PriorTo, sh: SignificantHarmToIndividual
if (
    notifiabledatabreach ndb && technologicalmeasure tm && priorto pt && (not significantharm sh)
)
then NotificationtoCommissionWithoutNotificationToIndividual



# s26D(6)(a) - Exception to notification to individuals
rule <s26d_6_a_applies>
for ndb: NotifiableDataBreach, le: PrescribedLawEnforcementInstructs
if (
    notifiabledatabreach ndb && prescribedlawenforcement le
)
then NotificationtoCommissionWithoutNotificationToIndividual



# s26D(6)(b) - Exception to notification to individuals
rule <s26d_6_a_applies>
for ndb: NotifiableDataBreach, cd: CommissionSoDirects
if (
    notifiabledatabreach ndb && commissionsodirects cd
)
then NotificationtoCommissionWithoutNotificationToIndividual


# s26D(7) - Wavier by Commission
rule <s26d_7_applies>
for ndb: NotifiableDataBreach, ao: ApplicationByOrg, wc: WavierByCommission
if (
    notifiabledatabreach ndb && applicationbyorg ao && waiverbycommission wc
)
then NotificationtoCommissionWithoutNotificationToIndividual



# s26D(8)(a) - Organisation not in breach of law
rule <s26d_8_a_applies>
for s26d_1_applies: Boolean, s26d_2_applies: Boolean
if (
    s26d_1_applies || s26b_2_applies
)
then (not ObligationUnderLawNotToDisclose)


# s26D(8)(b) - Organisation not in breach of professional conduct
rule <s26d_8_b_applies>
for s26d_1_applies: Boolean, s26d_2_applies: Boolean
if (
    s26d_1_applies || s26d_2_applies
)
then (not RuleOfProfessionalConduct)


#------------------------------ s26E: Notification of public agency ------------------------------ 

rule <s26e_applies>
for di: DataIntermediaryOnBehalfOfPublicAgency, rb: ReasonToBelieve, db: DataBreach
if (
    dataintermediaryonbehalfofpublicagency di && reasontobelieve rb && databreach db
)
then NotificationtoPublicAgency

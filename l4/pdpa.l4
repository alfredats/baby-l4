# l4 encoding of PDPA 
# Part VIA - Notification of Data Breaches &
# Personal Data Protection (Notification of Data Breaches) Regulations 2021

#------------------------------ Class definitions ------------------------------ 

# ---------------------------- Party definitions ----------------------
class Individual  {
    NaturalPersonLivingOrDeceased: Boolean
}


class PublicAgency

class Commission

class Organisation

class DataIntermediary extends Organisation  {
    ProcessesDataOnBehalfOfAnotherOrganisation: Boolean
    DoesNotIncludeEmployeeOfTheOtherOrganisation: Boolean
}

class DataIntermediaryOnBehalfOfPublicAgency extends DataIntermediary



#------------------------ What information constitutes data -------------------------------

class PersonalData  {
    IndividualIdentifiedFromData: Boolean
    IndividualIdentifiedFromDataAndInformationOrgHas: Boolean
}

class Event

class DataBreach  extends Event {
    UnauthorisedAccess: Boolean
    UnauthorisedCollection: Boolean
    UnauthorisedUse: Boolean
    UnauthorisedDisclosure: Boolean
    UnauthorisedCopying: Boolean
    UnauthorisedModification: Boolean
    UnauthorisedDisposal: Boolean
    LossofStorageMedium: Boolean
}

# MS: alternative?
class UnauthorizedAccessBreach extends DataBreach

#isDataBreach: Event -> Boolean
#isUnauthorizedAccessBreach: Event -> Boolean

#for x: Event
#if isDataBreach x
#then isUnauthorizedAccessBreach


class NotifiableDataBreach extends DataBreach

class DataBreachOnlyWithinOrg extends DataBreach


#----------------------------"Reasonability" concepts--------------------------

# To be written as predicate?
# MS: we should try to make it a subclass of a general notion, like Event or Action
class LikelytoOccur

class ReasonToBelieve

class BestofKnowledgeAndBelief

# NOTE: How to have a class declaration when there is an "open ended" class 
class OtherPrescribedCircumstances


class SignificantScale  {
    AffectedIndividuals: Integer
}

# MS: isn't that rather the individual and not the harm to the individual?
class SignificantHarmToIndividual  {
    FullName: Boolean
    IDNumber: Boolean
    PersonalDataInPart1ofScheduleSubjectToPart2ofSchedule: Boolean
    AccountIdentifier: Boolean
    PasswordtoAccount: Boolean
}


#------------------------------- Actions taken by parties involved-----------------------

class AssessmentOfDataBreach  {
    DataInPossession: Boolean
    DataUnderControl: Boolean
    ReasonableAndExpeditious: Boolean
    PrescribedRequirements: Boolean
}

class ActionTaken

class CommissionSoDirects

class PrescribedLawEnforcementInstructs

class ApplicationByOrg

class WavierByCommission

class PrescribedRequirements

class RestrictionOnTheDisclosureofInformation  {
    DutyorObligationUnderLaw: Boolean
    DutyUnderContract: Boolean
    RuleOfProfessionalConduct: Boolean
}

class InBreach

#------------------------------- Notification requirements ----------------------------

class Notification

class NotificationofOtherOrg extends Notification

class UponNotification extends Notification

# r5(1) of PDPR 
# NOTE: How to account for r5(3), which specifies that notification to commission must be in a particular format

class NotificationtoCommission extends UponNotification {
    
    # NOTE: We don't have a datetime datatype
    DateWhichBreachFirstOccurred: Integer 
    
    StepsTakenByOrgAfterBreach: String
    HowTheBreachOccurred: String
    NumOfAffectedIndividuals: Integer
    DataAffectedByBreach: String
    PotentialHarmToIndividuals: String

    ActionTakenBeforeOrAfterBreachToEliminateOrMitigateHarm: String
    ActionTakenBeforeOrAfterBreachToAddressAnyFailureThatMayHaveCausedBreach: String

    InfoOnOrgPlanToInformAffectedIndividuals: String
    BusinessContactofOrg: String
}


# r5(2)
class NotificationtoCommissionAfterExpiry extends NotificationtoCommission {
    ReasonsForLateNotification: String
    SupportingEvidence: String
}

# To r5(3)
class NotificationtoCommissionWithoutNotificationToIndividual extends NotificationtoCommission {
    GroundsForNotNotifyingIndividual: String
}

class NotificationtoPublicAgency extends Notification



#--------------------------- Time classes and misc ------------------------------
# NOTE: Would be good to have an comparison operator that signifies whether an event happens before or after another event (like > operator for ints)
# MS: the missing notion of time is one of the big problems of current L4. 
# "prior to" looks like a relation between two events / time points and should not be a class.

class PriorTo

class Days

class TechnologicalMeasure

class ObligationUnderLawNotToDiscloseOrRuleOfProfessionalConduct

class RuleOfProfessionalConduct


#------------------------------ Declarations ------------------------------ 

# NOTE: Are there established naming conventions for classes vs declarations?

#------------------------------ s26B: Notifiable Data Breach ------------------------------ 

# Definitions
# NOTE: Do I need to convert the classes to booleans?
# MS: significantharm should be a relation: 
decl significantharm: DataBreach -> Individual -> Boolean
# decl significantharm: SignificantHarmToIndividual -> Boolean

decl significantscale: SignificantScale -> Boolean
decl isOfSignificantScale: DataBreach -> Boolean
decl databreach: DataBreach -> Boolean
decl notifiabledatabreach: NotifiableDataBreach -> Boolean
decl databreachwithinorg: DataBreachOnlyWithinOrg -> Boolean

# s26B: Other prescribed circumstances
decl otherprescribedcircumstances: OtherPrescribedCircumstances -> Boolean


# s26B(2) - Significant harm
decl s26b_2_applies: DataBreach -> SignificantHarmToIndividual -> NotifiableDataBreach

decl s26b_3_applies: DataBreach -> SignificantScale -> NotifiableDataBreach

decl s26b_4_applies: DataBreach -> DataBreachOnlyWithinOrg -> Boolean

decl s26b_1_applies: NotifiableDataBreach -> NotificationtoCommission


# from s26C
# Definitions
decl reasontobelieve: ReasonToBelieve -> Boolean
decl dataintermediary: DataIntermediary -> Boolean
decl notification: Notification -> Boolean
decl notificationootherorg: NotificationofOtherOrg -> Boolean

decl s26c_3_a_applies: DataIntermediary -> ReasonToBelieve -> NotificationofOtherOrg
decl s26c_3_b_applies: NotificationofOtherOrg -> AssessmentOfDataBreach
decl s26c_2_applies: ReasonToBelieve -> DataIntermediary -> AssessmentOfDataBreach


# from s26D
# NOTE: Maybe these functions that convert the classes to booleans can be part of the local scope of the general rule? (ie. defined within an object called s26D)

# MS: duplicate:
# decl notifiabledatabreach: NotifiableDataBreach -> Boolean
decl actiontaken: ActionTaken -> Boolean
decl prescribedrequirements: PrescribedRequirements -> Boolean
# MS: duplicate:
# decl significantharm: SignificantHarmToIndividual -> Boolean
decl technologicalmeasure: TechnologicalMeasure -> Boolean
decl prescribedlawenforcement: PrescribedLawEnforcementInstructs -> Boolean
decl priorto: PriorTo -> Boolean
decl commissionsodirects: CommissionSoDirects -> Boolean
decl applicationbyorg: ApplicationByOrg -> Boolean
decl waiverbycommission: WavierByCommission -> Boolean

# MS: The following are just rulenames and do not have to be declared --
# unless one wants to reason about applicability of rules
# decl s26d_1_applies: NotifiableDataBreach -> NotificationtoCommission
# decl s26d_5_a_applies: NotifiableDataBreach -> ActionTaken -> PrescribedRequirements -> SignificantHarmToIndividual -> NotificationtoCommissionWithoutNotificationToIndividual
# decl s26d_5_b_applies: NotifiableDataBreach -> TechnologicalMeasure -> PriorTo -> SignificantHarmToIndividual -> NotificationtoCommissionWithoutNotificationToIndividual

decl dataintermediaryonbehalfofpublicagency: DataIntermediaryOnBehalfOfPublicAgency -> Boolean

#=======================================================================================
#== Rules
#=======================================================================================


rule <s26b_1_applies>
for db: DataBreach, indiv: Individual
if databreach db && (significantharm db indiv || isOfSignificantScale db)
then isNotifiableDataBreach db
# isNotifiableDataBreach is the characteristic predicate of NotifiableDataBreach
# The question is whether in the end, we will keep the class NotifiableDataBreach at all

# MS: not clear what "without limiting subsection (1)(a)" means here
rule <s26b_2_applies>
for db: DataBreach, indiv: Individual, opc: OtherPrescribedCircumstances
if (
    databreach db && (significantharm db indiv || otherprescribedcircumstances opc)
)
then significantharm db indiv



# s26B(3) - Significant Scale

rule <s26b_3_applies>
for db: DataBreach, ss: SignificantScale
if (
    databreach db && (significantscale ss || otherprescribedcircumstances opc)
)
then NotifiableDataBreach


# s26B(4) - Exception, breach within organisation


rule <s26b_4_applies>
for db: DataBreach, wo: DataBreachOnlyWithinOrg
if (
    databreach db && databreachwithinorg wo
)
# NOTE: Do we have a NOT operator?
then not NotifiableDataBreach


# s26B(1) - Notifiable Data Breach

rule <s26b_1_applies>
# NOTE: Does L4 accept other functions as arguments?
# NOTE: Does L4 require a shortform for variable declaration in function?
for s26b_2_applies: Boolean, s26b_3_applies: Boolean, s26b_4_applies: Boolean
if (
    (s26b_2_applies || s26b_3_applies) && (not s26b_4_applies)
)
then NotificationtoCommission


#------------------------------ s26C: Duty to Conduct Assessment of Breach ------------------------------ 


# s26C(3)(a): Duty for data intermediary to inform other organisation

rule <s26c_3_a_applies>
for di: DataIntermediary, rb: ReasonToBelieve
if (
    dataintermediary di && reasontobelieve rb
)
then NotificationofOtherOrg


# s26C(3)(b): Duty for other organisation to conduct assessment

rule <s26c_3_b_applies>
for n: NotificationofOtherOrg
if (
    notificationootherorg n
)
then AssessmentOfDataBreach




# s26C(2) - Duty to conduct assessment of data breach

rule <s26c_2_applies>
for rb: ReasonToBelieve, di: DataIntermediary
if (
    reasontobelieve rb && (not dataintermediary di)
)
then AssessmentOfDataBreach

# NOTE: s26C(4) can it be represented as the attribute of class AssessmentOfDataBreach?

# NOTE: Is there a way to represent the direction of an obligation?
# i.e. Whether the intermediary or the organisation is obliged to conduct and assessment
# Also who needs to send a notification to whom, e.g. from the data intermediary to the organisation



#------------------------------ s26D: Duty to Notify Occurrence of Notifiable Data Breach ------------------------------ 




# s26D(1) - Notification to commission


rule <s26d_1_applies>
for ndb: NotifiableDataBreach
if (
    notifiabledatabreach ndb
)
then NotificationtoCommission



# s26D(5)(a) - Exceptions to notification to individuals


rule <s26d_5_a_applies>
for ndb: NotifiableDataBreach, at: ActionTaken, pr: PrescribedRequirements, sh: SignificantHarmToIndividual
if (
    notifiabledatabreach ndb && actiontaken at && prescribedrequirements pr && (not significantharm sh)
)
then NotificationtoCommissionWithoutNotificationToIndividual



# s26D(5)(b) - Exception to notification to individuals


rule <s26d_5_b_applies>
for ndb: NotifiableDataBreach, tm: TechnologicalMeasure, pt: PriorTo, sh: SignificantHarmToIndividual
if (
    notifiabledatabreach ndb && technologicalmeasure tm && priorto pt && (not significantharm sh)
)
then NotificationtoCommissionWithoutNotificationToIndividual



# s26D(6)(a) - Exception to notification to individuals
#decl s26d_6_a_applies: NotifiableDataBreach -> PrescribedLawEnforcementInstructs -> NotificationtoCommissionWithoutNotificationToIndividual

rule <s26d_6_a_applies>
for ndb: NotifiableDataBreach, le: PrescribedLawEnforcementInstructs
if (
    notifiabledatabreach ndb && prescribedlawenforcement le
)
then NotificationtoCommissionWithoutNotificationToIndividual



# s26D(6)(b) - Exception to notification to individuals
#decl s26d_6_b_applies: NotifiableDataBreach -> CommissionSoDirects -> NotificationtoCommissionWithoutNotificationToIndividual

rule <s26d_6_a_applies>
for ndb: NotifiableDataBreach, cd: CommissionSoDirects
if (
    notifiabledatabreach ndb && commissionsodirects cd
)
then NotificationtoCommissionWithoutNotificationToIndividual


# s26D(7) - Wavier by Commission
#decl s26d_7_applies: NotifiableDataBreach -> ApplicationByOrg -> WavierByCommission -> NotificationtoCommissionWithoutNotificationToIndividual

rule <s26d_7_applies>
for ndb: NotifiableDataBreach, ao: ApplicationByOrg, wc: WavierByCommission
if (
    notifiabledatabreach ndb && applicationbyorg ao && waiverbycommission wc
)
then NotificationtoCommissionWithoutNotificationToIndividual



# s26D(8)(a) - Organisation not in breach of law
# NOTE: Is there a way to represent the conjunction of all the other rules from s26d(1) - s26d(7)?

#decl s26d_8_a_applies: s26d_1_applies -> s26d_2_applies -> ObligationUnderLawNotToDisclose

rule <s26d_8_a_applies>
for s26d_1_applies: Boolean, s26d_2_applies: Boolean
if (
    s26d_1_applies || s26b_2_applies
)
then (not ObligationUnderLawNotToDisclose)


# s26D(8)(b) - Organisation not in breach of professional conduct
#decl s26d_8_b_applies: s26d_1_applies -> s26d_2_applies -> RuleOfProfessionalConduct

rule <s26d_8_b_applies>
for s26d_1_applies: Boolean, s26d_2_applies: Boolean
if (
    s26d_1_applies || s26d_2_applies
)
then (not RuleOfProfessionalConduct)



# s26D(2) - Notification to Individuals
#decl s26d_2_applies: NotifiableDataBreach -> s26d_5_a_applies -> s26d_5_b_applies -> s26d_6_a_applies -> s26d_6_b_applies -> s26d_7_applies -> NotificationtoCommission

rule <s26d_2_applies>
for ndb: NotifiableDataBreach, 
    s26d_5_a_applies: Boolean, s26d_5_b_applies: Boolean, 
    s26d_6_a_applies: Boolean, s26d_6_b_applies: Boolean, s26d_7_applies: Boolean
if (
    notifiabledatabreach ndb && (s26d_5_a_applies || s26d_5_b_applies || s26d_6_a_applies || s26d_6_b_applies || s26d_7_applies)
)
then NotificationtoCommissionWithoutNotificationToIndividual
#else NotificationtoCommission
# Note: Do we have an else branch
# MS: No! The else-case is spelled out below

rule <s26d_2_applies_else>
for ndb: NotifiableDataBreach, 
    s26d_5_a_applies: Boolean, s26d_5_b_applies: Boolean, 
    s26d_6_a_applies: Boolean, s26d_6_b_applies: Boolean, s26d_7_applies: Boolean
if not (
    notifiabledatabreach ndb && (s26d_5_a_applies || s26d_5_b_applies || s26d_6_a_applies || s26d_6_b_applies || s26d_7_applies)
)
then NotificationtoCommission

# s26E - Notification of public agency
#decl s26e_applies: DataIntermediaryOnBehalfOfPublicAgency -> ReasonToBelieve -> DataBreach -> NotificationtoPublicAgency



rule <s26e_applies>
for di: DataIntermediaryOnBehalfOfPublicAgency, rb: ReasonToBelieve, db: DataBreach
if (
    dataintermediaryonbehalfofpublicagency di && reasontobelieve rb && databreach db
)
then NotificationtoPublicAgency

# run with:
# stack run -- l4 all --smt l4/smt.l4


# decl a: Boolean
# decl b: Boolean
decl a: Integer
#decl b: Integer
decl R: Integer -> Integer -> Boolean
decl S: Integer -> Integer -> Integer -> Boolean
decl P: Integer -> Boolean
# decl glob: Integer
decl f: Integer -> Integer

decl c1: Class
decl c2: Class
decl PC: Class -> Boolean
decl RC: Class -> Integer -> Boolean


# rule <foo>
# for x: Integer, z: Integer
# if (exists y: Integer. exists v: Integer. forall u: Integer. R x y && R y v)
# then R x x #--> forall x: Integer. (P x --> R x z) && R z x

rule <foo1>
for x: Integer, y: Integer
if x > y && y > 0
then P x


rule <foo2>
for x: Integer
if x < 7
then P x

rule <fooInv>
for x: Integer
if P x
then (exists y: Integer. x > y && y > 0) || (x < 7)

rule <fooC1>
for x1: Class, x2: Class, y: Integer
if RC x1 y && RC x2 (f y) && y > 47
then x1 = x2

rule <fooC2>
for x1: Class, x2: Class, y: Integer
if RC x1 y && RC x2 y && y < 42
then not (x1 = x2)

# rule <foo>
# for x: Integer, v: Integer
# if R x x && R x v
# then R x ((\w:Integer -> w + v) v)

# assert exists y : Integer. 2 + x < 2 * x  &&  2 * (x - y ) < 10 

assert {nSMT:
           {consistent
           }
       }
P a && a = 10

assert {SMT:
           {consistent
           }
       }
RC c1 a && RC c2 a



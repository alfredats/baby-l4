# Example taken from:
# George Luger: Artificial Intelligence, 6th edition
# Section 2.4: A logic-based financial adivsor

class FinancialStatus
class EarningsStatus
class InvestmentStrategy


class SavingsAccount {
      status : FinancialStatus
}

class Income {
      status : FinancialStatus
}

class Earnings {
      amount : Integer 
      status : EarningsStatus
}

class Investment {
      strategy : InvestmentStrategy
}

# corresponding to predicate amount_saved
class AmountSaved {
      value : Integer
}

class Dependents {
      number : Integer
}

# Enumeration of members of FinancialStatus
decl adequate: FinancialStatus
decl inadequate: FinancialStatus

# Enumeration of members of EarningsStatus
decl steady: EarningsStatus
decl unsteady: EarningsStatus

# Enumeration of members of InvestmentStrategy
decl savings: InvestmentStrategy
decl combination: InvestmentStrategy
decl stocks: InvestmentStrategy

# Functions
decl minsavings: Integer -> Integer
decl minincome: Integer -> Integer

decl myAmountSaved : AmountSaved
decl myEarnings : Earnings
decl myDependents : Dependents


## Exhaustiveness and disjointness

fact <financialStatusExhaustive>
for x: FinancialStatus
(x == adequate) || (x == inadequate)

fact <earningStatusExhaustive>
for x: EarningsStatus
(x == steady) || (x == unsteady)

fact <investmentStrategyExhaustive>
for x: InvestmentStrategy
(x == savings) || (x == combination) || (x == stocks)

fact <financialStatusDisj>
adequate /= inadequate

fact <earningStatusDisj>
steady /= unsteady

fact <investmentStrategyDisj>
(savings /= combination) && (savings /= combination) && (combination /= stocks)

## Definitions of functions

fact <minsavingsDef>
for x: Integer
minsavings x == 5000 * x

fact <minincomeDef>
for x: Integer
minincome x == 15000 + 4000 * x

## General rules

# 1
rule <accInad>
for acc : SavingsAccount, inv : Investment 
if acc.status == inadequate
then inv.strategy == savings 

# 2
rule <accAdIncAd>
for acc : SavingsAccount, inc : Income, inv : Investment 
if (acc.status == adequate) && inc.status == adequate
then inv.strategy == stocks

# 3
rule <accAdIncInad>
for acc : SavingsAccount, inc : Income, inv : Investment 
if (acc.status == adequate) && inc.status == inadequate
then inv.strategy == combination

# 4
rule <savingsAd>
for sav: AmountSaved, dep: Dependents, acc: SavingsAccount
if sav.value > minsavings (dep.number)
then acc.status == adequate

# 5
rule <savingsInad>
for sav: AmountSaved, dep: Dependents, acc: SavingsAccount
if sav.value <= minsavings (dep.number)
then acc.status == inadequate

# 6
rule <incomeAd>
for e: Earnings, dep: Dependents, inc: Income
if (e.status == steady) && e.amount > minincome (dep.number)
then inc.status == adequate

# 7
rule <incomeInadESteady>
for e: Earnings, dep: Dependents, inc: Income
if (e.status == steady) && e.amount <= minincome (dep.number)
then inc.status == inadequate

# 8
rule <incomeInadEUnsteady>
for e: Earnings, dep: Dependents, inc: Income
if e.status == unsteady
then inc.status == inadequate

## Derived rules

rule <investmentInversion>
     {derived: {apply: {inversion,
     	       	        apply: {normalize, accInad},
     	       	        apply: {normalize, accAdIncAd},
     	       	        apply: {normalize, accAdIncInad}}}}

rule <savings_accountInversion>
     {derived: {apply: {inversion,
     	       	        apply: {normalize, savingsAd},
     	       	        apply: {normalize, savingsInad}}}}

rule <incomeInversion>
     {derived: {apply: {inversion,
     	       	        apply: {normalize, incomeAd},
     	       	        apply: {normalize, incomeInadESteady},
     	       	        apply: {normalize, incomeInadEUnsteady}}}}

rule <amount_savedInversion> 
     {derived: {apply: {inversion,
     	       	        apply: {normalize, amount_savedF}}}}

rule <earningsInversion> 
     {derived: {apply: {inversion,
     	       	        apply: {normalize, earningsF}}}}

rule <dependentsInversion> 
     {derived: {apply: {inversion,
     	       	        apply: {normalize, dependentsF}}}}

## Facts concerning a specific case

# 9
fact <amount_savedF>
myAmountSaved.value == 22000

# 10
fact <earningsF>
(myEarnings.amount == 25000) && myEarnings.status == steady

# 11
fact <dependentsF>
myDependents.number == 3

# assert {SMT: valid}
# income inadequate

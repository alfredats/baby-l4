//
// PDPA Data Breach Notification Rules
//

  MODULE PDPA.20 DataBreachNotifications
         :en:"Data Breach Notifications"

  IMPORT "pdpa.l4"
         -- brings in the "ontology" class definition, etc
         "std-sf.l4"
	 -- standard library
	 

  SOURCE PDPA         { revision = 2020
                      , url = "https://drive.google.com/file/d/1uxntfz1l2nuL2bbZuQnAz75cnbc_vcDy/view?usp=sharing"
		      }.6A AS PDPA
       , Regulations  { revision = 2021-02-01
                      , url = "https://drive.google.com/file/d/1vIpdwZWnZg6ZKWzJPdGr8mAUZfs_84tN/view?usp=sharing"
       		      }.20 AS regulations
       , AdvGuidelines{ revision = 2021-02-01
                      , url = "https://drive.google.com/file/d/1ut9hEdmfWs5I3OWeRp7EfMf78fEn6ZfF/view?usp=sharing"
                      }    AS guidelines
       , Guide        { revision = 2021-03-15
                      , url = "https://drive.google.com/file/d/1uwwy6ZiJzTOypK1eCaXDjxDaOkKcS7lF/view?usp=sharing"
		      }    AS guide

      §§ DBNO
  SOURCE guidelines 20.1
  DEFINE DBNO :en:"Data Breach Notification Obligation"
      AS SOURCE PDPA
         [ startAssessment
	 , notifyBreach(to = affectedIndividuals)
	 , notifyBreach(to = principalOrganisation)
	 ]

      §§ startAssessment
  SOURCE guidelines 20.2--4
    UPON P.has.grounds(credible=True, to=believe(DBEvent))
   PARTY P :: Organisation | DataIntermediary
    MUST takeSteps(to=conductAssessment)
    LEST 
       { PARTY PDPC MAY
         NOTIFY( to = P
               , body = {
                   PARTY P
                   MUST NOTIFY( to = PDPC , body = explanation(re = delay) )
                 }
               )
       }
   WHERE DEFINE P.believe(DBEvent)
             AS WHEN DBEvent.notice_from IN [ Public, DataIntermediary ]
                  OR DBEvent.self_discovery
         DEFINE takeSteps(to=x)
	   :en: "take reasonable and expeditious steps to (x)"
	     AS x(reasonably=True)
             BY DEADLINE(expeditious=True)
	        WHERE SOURCE 20.4
		      expeditious x = x <= 30d

      §§ 20.5
  DEFINE conductAssessment AS
   PARTY P
    MUST documentSteps :en:"document all steps taken in assessing DB"
 SEEALSO 20.38--45

      §§ 20.6
  DEFINE Breach.notifiable = False
    WHEN allSame [ Breach.recipient.organization
                 , Breach.sender   .organization ]

    TEST p130 :en:"Misplaced storage drive"
   GIVEN Company :: Organisation { departments = [ HR ]
                                 , staff, interns :: [NaturalPerson]
                                 }
         Device :: DataVessel    { contains = [ Company.staff.personalData
                                              , Company.interns.personalData ]
                                 , status :: Lost | Found
                                 , accessLog = [ Date ]
                                 }
         Sarah :: Human          { role = "HR executive"
                                 , employer = Company }
         Rachel :: Human         { employer = Company }
   TRACE Date1                NOTIFY (from = Sarah,  to = Company, body = { Device.status = Misplaced } )
         Date2 === Date1 + 4d DELIVER(from = Rachel, to = Company.departments.HR, body = Device)
         Date2                AVER   (from = Company, body = { Device.accessLog[Date1 .. Date2] == [] } )
  EXPECT Breach.notifiable == False

      §§ 20.7
         :en:"intermediary must inform principal"
    UPON DI.believe(DBEvent)
   PARTY DI :: DataIntermediary
    MUST NOTIFY( to = DI.principal(for = DBEvent), body = DBEvent )




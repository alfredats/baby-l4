//
// PDPA Data Breach Notification Rules
//

  MODULE PDPA.20 DataBreachNotifications
         :en:"Data Breach Notifications"

  IMPORT "pdpa.l4"
         -- brings in the "ontology" class definition, etc

  SOURCE PDPA         {revision:2020}      .6A
       , AdvGuidelines{revision:2021-02-01}.20 AS guidelines

      §§ startAssessment
  SOURCE guidelines 20.1--4
    UPON P.believe(DBEvent)
   PARTY P :: Organisation | DataIntermediary
    MUST conductAssessment :en:"take reasonable and expeditious steps to assess"
      BY 30d
    LEST -- lambda rule, inline and nameless
       { PARTY PDPC MAY -- activate a new rule, that
         NOTIFY( to = P
               , body = {
                   PARTY P
                   MUST NOTIFY( to = PDPC , body = explanation(re = delay) )
                 }
               )
       }
   WHERE DEFINE P.believe(DBEvent)
             AS WHEN NOTICE.from IN [ Public, DataIntermediary ]
                  OR DBEvent.self_discovery
         
      §§ 20.5
  DEFINE conductAssessment AS
   PARTY P
    MUST documentSteps :en:"document all steps taken in assessing DB"
 SEEALSO 20.38--45

      §§ 20.6
  DEFINE Breach.notifiable = False
    WHEN allSame [ Breach.recipient.organization
                 , Breach.sender   .organization ]

    TEST p130 :en:"Misplaced storage drive"
   GIVEN Company :: Organisation { departments = [ HR ]
                                 , staff, interns :: [NaturalPerson]
                                 }
         Device :: DataVessel    { contains = [ Company.staff.personalData
                                              , Company.interns.personalData ]
                                 , status :: Lost | Found
                                 , accessLog = [ Date ]
                                 }
         Sarah :: Human          { role = "HR executive"
                                 , employer = Company }
         Rachel :: Human         { employer = Company }
   TRACE Date1               NOTIFY (from = Sarah,  to = Company, body = { Device.status = Misplaced } )
         Date2 === Date1 + 4 DELIVER(from = Rachel, to = Company.departments.HR, body = Device)
         Date2               AVER   (from = Company, body = { Device.accessLog[Date1 .. Date2] == [] } )
  EXPECT Breach.notifiable == False

      §§ 20.7
         :en:"intermediary must inform principal"
    UPON DI.believe(DBEvent)
   PARTY DI :: DataIntermediary
    MUST NOTIFY( to = DI.principal(for = DBEvent) )




lexicon

# Rock -> "rock"
# Paper -> "paper_1_N"
# Scissors -> "scissors_1_N"
# Throw -> "throw_1_V2"
# Win -> "win_1_V2"
# Lose -> "lose_1_V2"
# Beat -> "beat_1_V2"
# Participate_in -> "participates in"
# Player -> "player_5_N"
# Sign -> "sign_2_N"
# Game -> "game_1_N"

class Sign {
    beat : Sign -> Bool
}

class Player {
    throw : Sign -> Bool
}

class Game {
    participate_in : Player -> Bool
    win : Player -> Bool
}


# decl Rock : Sign
# decl Paper : Sign
# decl Scissors : Sign

# rule <beats_rock_scissors>
# if True
# then beat Rock Scissors

# rule <beats_scissors_paper>
# if True
# then beat Scissors Paper

# rule <beats_paper_rock>
# if True
# then beat Rock Paper

# these things later get treated as enums
# decl Rock     : Sign
# decl Paper    : Sign
# decl Scissors : Sign

# proposed new syntax:
# https://www.typescriptlang.org/docs/handbook/enums.html
# good artists copy; great artists steal
# enum Sign {
#     Rock, Paper, Scissors
# }

# downstream, rps.out wants to have
#   "throws" is an Enum whose options are rock:Rock, paper:Paper, scissors:Scissors
# and that's cool, our rule is, we downcase the enum value, and we create "options" under
# an attribute whose "name" is whatever, and we ignore the orig enum type name and just say "Enum".

rule <winner>
for a : Player, g : Game, r : Sign, s : Sign
if (exists b : Player . g.participate_in(a) && g.participate_in(b)&&
                        a.throw(r) && b.throw(s) && r.beat(s)
   )
then g.win(a)
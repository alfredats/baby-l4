### Fake example rules about speed limits of different kinds of vehicles
### on different days on different kinds of roads.

### Classes

class Vehicle
class Car extends Vehicle
class Truck extends Vehicle

class Day
class Workday extends Day
class Holiday extends Day

class Road
class Highway extends Road

### Predicates 

## uninteresting (the is... predicates should be generated)
# decl isVehicle : Vehicle -> Boolean
decl isCar : Vehicle -> Boolean
decl isTruck : Vehicle -> Boolean

# decl isDay : Day -> Boolean
decl isWorkday : Day -> Boolean
decl isHoliday : Day -> Boolean

# decl isRoad : Road -> Boolean
decl isHighway : Road -> Boolean

## interesting: the maximal speed of a vehicle on a day on a road is ...
# Could be modeled as a functional dependency, but this would
# make it impossible to verify that the relation is functional
decl maxSpeed : Vehicle -> Day -> Road -> Integer -> Boolean

# typical representatives of their class
decl instCar : Vehicle
decl instDay : Day
decl instRoad : Road
decl instSpeed1: Integer
decl instSpeed2: Integer

### Facts and rules

## Typing of the instances
# (typing of instDay and instRoad is a tautology)

fact <instCarType>
isCar instCar


## Class inclusion: follows from typing


## Class disjointness (possible to automate)

# top-level classes: follows from typing

# subclasses of Vehicle
fact <CarTrDistinct>
for c: Vehicle
not (isCar c && isTruck c)

# subclasses of Day
fact <WdHdDistinct>
for c: Day
not (isWorkday c && isHoliday c)


## Domain-specific rules

rule <maxSpCarWorkdayHighway>
for v: Vehicle, d: Day, r: Road, s: Integer
if isCar v && isWorkday d && isHighway r && s = 130
then maxSpeed v d r s

# "Incorrect" version not excluding highways as roads
rule <maxSpCarWorkdayRoad>
for v: Vehicle, d: Day, r: Road, s: Integer
if isCar v && isWorkday d && s = 90
then maxSpeed v d r s

# "Corrected" version making subjectTo clause explicit
rule <maxSpCarWorkdayRoadRestrSubjectTo> 
#     {subjectTo : maxSpCarWorkdayHighway}
for v: Vehicle, d: Day, r: Road, s: Integer
if isCar v && isWorkday d && s = 90
   && not (isCar v && isWorkday d && isHighway r && s = 130)
then maxSpeed v d r s

# Inversion of rules maxSpCarWorkdayHighway and maxSpCarWorkdayRoad
rule <maxSpInversion>
for v: Vehicle, d: Day, r: Road, s: Integer
if maxSpeed v d r s
then
 (isCar v && isWorkday d && isHighway r && s = 130) ||
 (isCar v && isWorkday d && s =  90)

# Inversion of rules maxSpCarWorkdayHighway and maxSpCarWorkdayRoadRestrSubjectTo
rule <maxSpInversionSubjectTo>
for v: Vehicle, d: Day, r: Road, s: Integer
if maxSpeed v d r s
then
 (isCar v && isWorkday d && isHighway r && s = 130) ||
 (isCar v && isWorkday d && s =  90 && not (isHighway r))


# Non-functionality of maxSpeed is consistent with the assumption set
# including the incorrect maxSpCarWorkdayRoad
# --> satisfiable
assert {nSMT:
           {consistent, 
            rules: {only: {instCarType,
                          WdHdDistinct, CarTrDistinct,
                          maxSpCarWorkdayHighway,
                          maxSpCarWorkdayRoad,
                          maxSpInversion
                          }
                   }
           },
        nsCASP: {}
       }
maxSpeed instCar instDay instRoad instSpeed1 &&
maxSpeed instCar instDay instRoad instSpeed2 &&
instSpeed1 < instSpeed2

# Non-functionality of maxSpeed is consistent with the assumption set
# including the correct maxSpCarWorkdayRoadRestrSubjectTo and maxSpInversionSubjectTo
# --> unsatisfiable
assert {nSMT:
           {consistent, 
            rules: {only: {instCarType,
                          WdHdDistinct, CarTrDistinct,
                          maxSpCarWorkdayHighway,
                          maxSpCarWorkdayRoadRestrSubjectTo,
                          maxSpInversionSubjectTo
                          }
                   }
           }
       }
maxSpeed instCar instDay instRoad instSpeed1 &&
maxSpeed instCar instDay instRoad instSpeed2 &&
instSpeed1 < instSpeed2


# Functionality of maxSpeed follows from incorrect assumption set
# excluding the correct maxSpCarWorkdayRoadRestrSubjectTo and maxSpInversionSubjectTo 
# --> not valid, countermodel generated
assert {SMT:
           {valid, 
            rules: {del : {maxSpCarWorkdayRoadRestrSubjectTo, maxSpInversionSubjectTo}}
           }
       }
maxSpeed instCar instDay instRoad instSpeed1 &&
maxSpeed instCar instDay instRoad instSpeed2
--> instSpeed1 = instSpeed2

# Functionality of maxSpeed follows from incorrect assumption set
# excluding the incorrect maxSpCarWorkdayRoad, maxSpInversion
# --> valid
assert {nSMT:
           {valid, 
            rules: {del : {maxSpCarWorkdayRoad, maxSpInversion}}
           }
       }
maxSpeed instCar instDay instRoad instSpeed1 &&
maxSpeed instCar instDay instRoad instSpeed2
--> instSpeed1 = instSpeed2
